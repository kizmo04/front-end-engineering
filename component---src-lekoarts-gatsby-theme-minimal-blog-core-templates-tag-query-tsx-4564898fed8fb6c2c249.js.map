{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/tag.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog-core/templates/tag-query.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog-core/components/tag.tsx","webpack:///./src/utils/getPostsFromQuery.ts","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/listing.tsx"],"names":["ItemTags","tags","Fragment","map","tag","i","key","slug","sx","opacity","name","Tag","posts","pageContext","useMinimalBlogConfig","tagsPath","basePath","title","alignItems","justifyContent","flexFlow","as","variant","marginY","Link","to","replaceSlashes","mt","TagComponent","props","allPost","data","getPostsFromQuery","nodes","edges","node","postId","id","mdxPost","find","edge","author","parent","frontmatter","BlogListItem","post","showTags","mb","fontSize","color","a","date","Listing","className"],"mappings":"2FAAA,qCA4BeA,IAnBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAGlB,OACE,YAAC,IAAMC,SAAP,KACGD,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,YAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GANU,IAOb,oBAAMG,GAAI,CACRC,QAAS,QAPD,IASQL,EAAIM,a,kKCkCjBC,EAvBH,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAA4B,EACjBC,cAAvBC,EADwC,EACxCA,SAAUC,EAD8B,EAC9BA,SAElB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKC,MAAK,QAAUJ,EAAYH,OAChC,YAAC,IAAD,CAAMF,GAAI,CAAEU,WAAY,SAAUC,eAAgB,gBAAiBC,SAAU,SAC3E,YAAC,IAAD,CAASC,GAAG,KAAKC,QAAQ,YAAYd,GAAI,CAAEe,QAAS,IACjDV,EAAYH,MAEf,YAAC,IAAD,CACEW,GAAIG,OACJhB,GAAI,CAAEc,QAAS,kBAAmBC,QAAS,GAC3CE,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,IAHrC,kBAQF,YAAC,IAAD,CAASH,MAAOA,EAAOJ,GAAI,CAAEmB,GAAI,CAAC,EAAG,Q,YC9C5BC,UCeA,YAAiD,IAAhBC,EAAgB,oBAEpDC,EACND,EADFE,KAAQD,QAGJlB,EAAQoB,YAAkBF,GAEhC,OAAO,kBAAC,EAAD,eAAKlB,MAAOA,GAAWiB,M,2nBCNjBG,IAZW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACxBD,EAAM9B,KAAI,SAAAgC,GAAQ,MACVC,EAASD,EAAKE,GACdC,EAAO,UAAGJ,EAAMK,MAAK,SAAAC,GACzB,OAAOA,EAAKL,KAAKE,KAAOD,YADb,aAAG,EAEZD,KACJ,cACKA,GADL,IAEEM,OAAQH,EAAQI,OAAOC,YAAYF,c,2GC2B1BG,EA5BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,YAAC,IAAD,CAAKC,GAAI,GACP,YAAC,OAAD,CAAMtB,GAAIoB,EAAKtC,KAAMC,GAAI,CAAEwC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SACpDJ,EAAK5B,OAER,iBACET,GAAI,CACFyC,MAAO,YACPtB,GAAI,EACJuB,EAAG,CAAED,MAAO,aACZD,SAAU,CAAC,EAAG,EAAG,KAGnB,wBAAOH,EAAKM,MACX,KACD,wBAAON,EAAKJ,QACXI,EAAK5C,MAAQ6C,GACZ,8BACG,KACD,YAAC,IAAM5C,SAAP,KACE,YAAC,IAAD,CAAUD,KAAM4C,EAAK5C,YCflBmD,IARC,SAAC,GAAD,IAAGxC,EAAH,EAAGA,MAAH,IAAUyC,iBAAV,eAA0BP,gBAA1B,gBACd,uBAAStC,GAAI,CAAEuC,GAAI,CAAC,EAAG,EAAG,IAAMM,UAAWA,GACxCzC,EAAMT,KAAI,SAAC0C,GAAD,OACT,YAAC,EAAD,CAAcvC,IAAKuC,EAAKtC,KAAMsC,KAAMA,EAAMC,SAAUA","file":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-tag-query-tsx-4564898fed8fb6c2c249.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport React from \"react\"\nimport { Tag } from \"../../../types\";\n\ntype TagsProps = {\n  tags: Tag[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const tagDelimiter = \" \";\n  const tagPrefix = \"#\";\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && tagDelimiter}\n          <span sx={{\n            opacity: \"0.7\",\n          }}>\n            {`${tagPrefix}${tag.name}`}\n          </span>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n        <Heading as=\"h1\" variant=\"styles.h1\" sx={{ marginY: 2 }}>\n          {pageContext.name}\n        </Heading>\n        <TLink\n          as={Link}\n          sx={{ variant: `links.secondary`, marginY: 2 }}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\nexport default Tag\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"@lekoarts/gatsby-theme-minimal-blog-core/src/components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        id\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        tags {\n          name\n          slug\n        }\n      }\n      edges {\n        node {\n          ... on MdxPost {\n            parent {\n              ... on Mdx {\n                id\n                frontmatter {\n                  author\n                }\n              }\n              id\n            }\n          }\n          id\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport Tag from \"@lekoarts/gatsby-theme-minimal-blog/src/components/tag\"\nimport getPostsFromQuery from \"../../../utils/getPostsFromQuery\"\nimport { AllPostResult } from \"../../../types\"\n\ntype Props = {\n  data: {\n    allPost: AllPostResult;\n  }\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCoreTag({ ...props }: Props) {\n  const {\n    data: { allPost },\n  } = props\n\n  const posts = getPostsFromQuery(allPost);\n\n  return <Tag posts={posts} {...props} />\n}\n","import { AllPostEdge, AllPostNode } from \"../types\";\n\ntype QueryResult = {\n  nodes: AllPostNode[];\n  edges: AllPostEdge[]\n}\n\nconst getPostsFromQuery = ({ nodes, edges }: QueryResult) => \n  nodes.map(node => {\n    const postId = node.id;\n    const mdxPost = edges.find(edge => {\n      return edge.node.id === postId;\n    })?.node;\n    return {\n      ...node,\n      author: mdxPost.parent.frontmatter.author\n    }\n  })\n\nexport default getPostsFromQuery;","/** @jsx jsx */\nimport React from \"react\";\nimport { jsx } from \"theme-ui\";\nimport { Box } from \"@theme-ui/components\";\nimport { Link } from \"gatsby\";\nimport ItemAuthor from \"./item-author\";\nimport ItemTags from \"./item-tags\";\nimport Post from \"../../../types/Post\";\n\ntype BlogListItemProps = {\n  post: Post;\n  showTags?: boolean;\n};\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <Link to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </Link>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 1,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <time>{post.date}</time>\n      {\", \"}\n      <span>{post.author}</span>\n      {post.tags && showTags && (\n        <>\n          {\", \"}\n          <React.Fragment>\n            <ItemTags tags={post.tags} />\n          </React.Fragment>\n        </>\n      )}\n    </p>\n  </Box>\n);\n\nexport default BlogListItem;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Post } from \"../../../types\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: Post[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n"],"sourceRoot":""}